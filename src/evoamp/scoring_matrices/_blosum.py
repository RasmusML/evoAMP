import numpy as np

# aminoacids in the order: ACDEFGHIKLMNPQRSTVWY
# from: https://resources.qiagenbioinformatics.com/manuals/clcgenomicsworkbench/current/index.php?manual=BLOSUM62_log_odds_matrix.html
BLOSUM62_SCORING_MATRIX = np.array(
    [
        [4, 0, -2, -1, -2, 0, -2, -1, -1, -1, -1, -2, -1, -1, -1, 1, 0, 0, -3, -2],
        [0, 9, -3, -4, -2, -3, -3, -1, -3, -1, -1, -3, -3, -3, -3, -1, -1, -1, -2, -2],
        [-2, -3, 6, 2, -3, -1, -1, -3, -1, -4, -3, 1, -1, 0, -2, 0, -1, -3, -4, -3],
        [-1, -4, 2, 5, -3, -2, 0, -3, 1, -3, -2, 0, -1, 2, 0, 0, -1, -2, -3, -2],
        [-2, -2, -3, -3, 6, -3, -1, 0, -3, 0, 0, -3, -4, -3, -3, -2, -2, -1, 1, 3],
        [0, -3, -1, -2, -3, 6, -2, -4, -2, -4, -3, 0, -2, -2, -2, 0, -2, -3, -2, -3],
        [-2, -3, -1, 0, -1, -2, 8, -3, -1, -3, -2, 1, -2, 0, 0, -1, -2, -3, -2, 2],
        [-1, -1, -3, -3, 0, -4, -3, 4, -3, 2, 1, -3, -3, -3, -3, -2, -1, 3, -3, -1],
        [-1, -3, -1, 1, -3, -2, -1, -3, 5, -2, -1, 0, -1, 1, 2, 0, -1, -2, -3, -2],
        [-1, -1, -4, -3, 0, -4, -3, 2, -2, 4, 2, -3, -3, -2, -2, -2, -1, 1, -2, -1],
        [-1, -1, -3, -2, 0, -3, -2, 1, -1, 2, 5, -2, -2, 0, -1, -1, -1, 1, -1, -1],
        [-2, -3, 1, 0, -3, 0, 1, -3, 0, -3, -2, 6, -2, 0, 0, 1, 0, -3, -4, -2],
        [-1, -3, -1, -1, -4, -2, -2, -3, -1, -3, -2, -2, 7, -1, -2, -1, -1, -2, -4, -3],
        [-1, -3, 0, 2, -3, -2, 0, -3, 1, -2, 0, 0, -1, 5, 1, 0, -1, -2, -2, -1],
        [-1, -3, -2, 0, -3, -2, 0, -3, 2, -2, -1, 0, -2, 1, 5, -1, -1, -3, -3, -2],
        [1, -1, 0, 0, -2, 0, -1, -2, 0, -2, -1, 1, -1, 0, -1, 4, 1, -2, -3, -2],
        [0, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1, 0, -1, -1, -1, 1, 5, 0, -2, -2],
        [0, -1, -3, -2, -1, -3, -3, 3, -2, 1, 1, -3, -2, -2, -3, -2, 0, 4, -3, -1],
        [-3, -2, -4, -3, 1, -2, -2, -3, -3, -2, -1, -4, -4, -2, -3, -3, -2, -3, 11, 2],
        [-2, -2, -3, -2, 3, -3, 2, -1, -2, -1, -1, -2, -3, -1, -2, -2, -2, -1, 2, 7],
    ],
    dtype=np.float32,
)

BLOSUM80_SCORING_MATRIX = np.array(
    [
        [5, -1, -2, -1, -3, 0, -2, -2, -1, -2, -1, -2, -1, -1, -2, 1, 0, 0, -3, -2],
        [-1, 9, -4, -5, -3, -4, -4, -2, -4, -2, -2, -3, -4, -4, -4, -2, -1, -1, -3, -3],
        [-2, -4, 6, 1, -4, -2, -2, -4, -1, -5, -4, 1, -2, -1, -2, -1, -1, -4, -6, -4],
        [-1, -5, 1, 6, -4, -3, 0, -4, 1, -4, -2, -1, -2, 2, -1, 0, -1, -3, -4, -3],
        [-3, -3, -4, -4, 6, -4, -2, -1, -4, 0, 0, -4, -4, -4, -4, -3, -2, -1, 0, 3],
        [0, -4, -2, -3, -4, 6, -3, -5, -2, -4, -4, -1, -3, -2, -3, -1, -2, -4, -4, -4],
        [-2, -4, -2, 0, -2, -3, 8, -4, -1, -3, -2, 0, -3, 1, 0, -1, -2, -4, -3, 2],
        [-2, -2, -4, -4, -1, -5, -4, 5, -3, 1, 1, -4, -4, -3, -3, -3, -1, 3, -3, -2],
        [-1, -4, -1, 1, -4, -2, -1, -3, 5, -3, -2, 0, -1, 1, 2, -1, -1, -3, -4, -3],
        [-2, -2, -5, -4, 0, -4, -3, 1, -3, 4, 2, -4, -3, -3, -3, -3, -2, 1, -2, -2],
        [-1, -2, -4, -2, 0, -4, -2, 1, -2, 2, 6, -3, -3, 0, -2, -2, -1, 1, -2, -2],
        [-2, -3, 1, -1, -4, -1, 0, -4, 0, -4, -3, 6, -3, 0, -1, 0, 0, -4, -4, -3],
        [-1, -4, -2, -2, -4, -3, -3, -4, -1, -3, -3, -3, 8, -2, -2, -1, -2, -3, -5, -4],
        [-1, -4, -1, 2, -4, -2, 1, -3, 1, -3, 0, 0, -2, 6, 1, 0, -1, -3, -3, -2],
        [-2, -4, -2, -1, -4, -3, 0, -3, 2, -3, -2, -1, -2, 1, 6, -1, -1, -3, -4, -3],
        [1, -2, -1, 0, -3, -1, -1, -3, -1, -3, -2, 0, -1, 0, -1, 5, 1, -2, -4, -2],
        [0, -1, -1, -1, -2, -2, -2, -1, -1, -2, -1, 0, -2, -1, -1, 1, 5, 0, -4, -2],
        [0, -1, -4, -3, -1, -4, -4, 3, -3, 1, 1, -4, -3, -3, -3, -2, 0, 4, -3, -2],
        [-3, -3, -6, -4, 0, -4, -3, -3, -4, -2, -2, -4, -5, -3, -4, -4, -4, -3, 11, 2],
        [-2, -3, -4, -3, 3, -4, 2, -2, -3, -2, -2, -3, -4, -2, -3, -2, -2, -2, 2, 7],
    ],
    dtype=np.float32,
)


def _convert_blosum_to_probability(blosum_matrix: np.ndarray) -> np.ndarray:
    # Convert log-odds scores (base 2) to probabilities
    prob_matrix = np.power(2, blosum_matrix)

    row_sums = prob_matrix.sum(axis=1, keepdims=True)
    prob_matrix_normalized = prob_matrix / row_sums

    return prob_matrix_normalized
